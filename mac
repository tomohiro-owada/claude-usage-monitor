#!/bin/bash

# .env ファイルを .env.localからコピーして生成する
if [ ! -e '.env' ]; then
    echo envファイルを生成します。
    cp .env.local .env
    echo envファイルが生成されました。
fi

# ネットワーク名定義
PROJECT_NETWORK=$(grep NETWORK_NAME .env | cut -d '=' -f2)
docker network ls | grep "${PROJECT_NETWORK}" >/dev/null || docker network create "${PROJECT_NETWORK}"

# localのループバックIPを一つ設定する
LOCAL_IP=$(grep LOCAL_IP .env | cut -d '=' -f2)

# macOSかつ、ifconfigに意図したIPが設定されていない場合、 sudo ifconfig lo0 alias を叩く
if [[ "$OSTYPE" == "darwin"* ]] && ! ifconfig | grep -i "$LOCAL_IP" > /dev/null; then
    echo "$LOCAL_IP" が無効なのでエイリアスを生成します。パスワードを入力してください。
    sudo ifconfig lo0 alias "$LOCAL_IP" up
fi

# プロジェクト名定義
COMPOSE_PROJECT_NAME=$(grep COMPOSE_PROJECT_NAME .env | cut -d '=' -f2)

# コンテナ名定義
WEB="${COMPOSE_PROJECT_NAME}-web"
APP="${COMPOSE_PROJECT_NAME}-app"
DB="${COMPOSE_PROJECT_NAME}-db"
WORKER="${COMPOSE_PROJECT_NAME}-worker"

# コマンド定義
RUN_APP="docker exec -it ${APP}"
RUN_APP_GITHUB_ACTIONS="docker exec -i ${APP}"

# コンテナ内のパス定義
REMOTE_APP_DIR="/opt/${COMPOSE_PROJECT_NAME}"
REMOTE_VENDOR_DIR="${REMOTE_APP_DIR}/vendor"
REMOTE_NODE_DIR="${REMOTE_APP_DIR}/node_modules"

# ローカルのパス定義
LOCAL_APP_DIR="../../laravel"
LOCAL_VENDOR_DIR="${LOCAL_APP_DIR}/vendor"
LOCAL_NODE_DIR="${LOCAL_APP_DIR}/node_modules"
MIGRATIONS_DIR="${LOCAL_APP_DIR}/database/migrations"
MIGRATIONS_BACKUP_DIR="${LOCAL_APP_DIR}/database/backup"
SQL_SCHEME_DIR="${LOCAL_APP_DIR}/database/schema"

case "$1" in

"create")

    # アプリケーションを立ち上げるために必要なもの準備している。
    # オプショナルなものはここでは立ち上げない方針。
    # コマンドを用意して、開発者が必要と感じた際に使用する。
    # イメージ、データボリュームの全消し。最初からやり直す場合に使用する。

    docker compose down --rmi all --volumes --remove-orphans
    docker network prune -f
    docker container prune -f
    docker image prune -f
    docker volume prune -f

    rm -rf ${LOCAL_VENDOR_DIR}
    rm -rf ${LOCAL_NODE_DIR}

    rm -rf ./nginx/ssl
    mkdir -p ./nginx/ssl
    mkcert -install
    mkcert -key-file ./nginx/ssl/key.pem -cert-file ./nginx/ssl/cert.pem invase-backend-local.jp "*.invase-backend-local.jp"

    # ネットワーク名定義
    PROJECT_NETWORK=$(grep NETWORK_NAME .env | cut -d '=' -f2)
    docker network create "${PROJECT_NETWORK}"

    docker compose up -d --build

    ${RUN_APP} dockerize -timeout 60s -wait tcp://"${DB}":5432

    ${RUN_APP} composer install
    ${RUN_APP} composer dump-autoload
    docker compose run --rm s3-buckets

    ${RUN_APP} ./artisan migrate:refresh --seed
    ${RUN_APP} ./artisan passport:client --password --name="${COMPOSE_PROJECT_NAME}" --provider=users
    ${RUN_APP} ./artisan passport:client --personal --name="${COMPOSE_PROJECT_NAME}" --provider=users

    ${RUN_APP} ./artisan db:seed --class=FaqSeeder
    ${RUN_APP} ./artisan db:seed --class=ArticleSeeder
    ${RUN_APP} ./artisan db:seed --class=NewsSeeder
    ${RUN_APP} ./artisan db:seed --class=PartnerCompanyOperationUserSeeder
    ${RUN_APP} ./artisan db:seed --class=PartnerCompanyNotificationSeeder
    ${RUN_APP} ./artisan db:seed --class=UserSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseRealEstateSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseRealEstateSearchSeeder
    ${RUN_APP} ./artisan db:seed --class=VoucherContractSeeder
    ${RUN_APP} ./artisan db:seed --class=VoucherSeeder
    ${RUN_APP} ./artisan db:seed --class=SellRealEstateSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseSeeder
    ${RUN_APP} ./artisan db:seed --class=RefinancePreContractSeeder
    ${RUN_APP} ./artisan db:seed --class=RefinanceMainContractSeeder
    ${RUN_APP} ./artisan db:seed --class=DashboardContractSeeder
    ${RUN_APP} ./artisan db:seed --class=AdviserConsultSeeder
    ${RUN_APP} ./artisan db:seed --class=CustomerManagementSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseLoanPreContractSeeder
    ${RUN_APP} ./artisan db:seed --class=RequiredDocumentSeeder

    ${RUN_APP} ./artisan optimize:clear

    ${RUN_APP} yarn install
    ${RUN_APP} yarn run dev

    # コンテナのvendorディレクトリをローカルに持ってくるため、composer installが実行されている必要がある。
    docker cp "${APP}":"${REMOTE_VENDOR_DIR}" ${LOCAL_APP_DIR}

    # コンテナのnode_modulesディレクトリをローカルに持ってくるため、yarn installが実行されている必要がある。
    docker cp "${APP}":"${REMOTE_NODE_DIR}" ${LOCAL_APP_DIR}

    ${RUN_APP} ./artisan ide-helper:generate
    ${RUN_APP} ./artisan ide-helper:models --nowrite

    docker cp "${APP}":"${REMOTE_APP_DIR}"/_ide_helper.php ${LOCAL_APP_DIR}
    docker cp "${APP}":"${REMOTE_APP_DIR}"/_ide_helper_models.php ${LOCAL_APP_DIR}

    docker ps -a
    ;;

"up")
    # docker composeの単純な再起動
    docker compose down
    docker compose up -d
    docker ps -a
    ;;

"down")
    # docker compose down
    docker compose down
    docker container prune -f
    docker image prune -f
    docker images
    docker ps -a
    ;;

"web")
    # Nginxコンテナへの入る
    docker exec -it "${WEB}" sh
    ;;

"app")
    # applicationコンテナへの入る
    docker exec -it "${APP}" sh
    ;;

"worker")
    # workerコンテナへの入る
    docker exec -it "${WORKER}" sh
    ;;

"schema")
    # SchemaSpyを利用して、ER図を生成する。
    # DBコンテナが立ち上がっていることが前提
    docker compose run --rm schemaspy
    ;;

"ide")
    ${RUN_APP} ./artisan ide-helper:generate
    ${RUN_APP} ./artisan ide-helper:models --nowrite
    docker cp "${APP}":"${REMOTE_APP_DIR}"/_ide_helper.php ${LOCAL_APP_DIR}
    docker cp "${APP}":"${REMOTE_APP_DIR}"/_ide_helper_models.php ${LOCAL_APP_DIR}
    ;;

"db:refresh")
    docker compose down

    docker volume rm invase-db
    docker volume rm invase-redis
    docker volume rm invase-s3
    docker volume rm invase-s3-config

    docker compose up -d

    # DBコンテナが立ち上がっていることが前提となるため、疎通確認。
    ${RUN_APP} dockerize -timeout 60s -wait tcp://"${DB}":5432

    # volumeが削除されているのでバケットを生成する。
    docker compose run --rm s3-buckets

    ${RUN_APP} ./artisan migrate
    # rollbackが問題ないかを確認する意図がある。
    ${RUN_APP} ./artisan migrate:rollback
    ${RUN_APP} ./artisan db:wipe
    ${RUN_APP} ./artisan migrate

    # LaravelPassportの準備
    ${RUN_APP} ./artisan passport:client --personal --name="${COMPOSE_PROJECT_NAME}" --provider=users
    ${RUN_APP} ./artisan passport:client --password --name="${COMPOSE_PROJECT_NAME}" --provider=users

    # seeder実行
    ${RUN_APP} ./artisan db:seed --class=FaqSeeder
    ${RUN_APP} ./artisan db:seed --class=ArticleSeeder
    ${RUN_APP} ./artisan db:seed --class=NewsSeeder
    ${RUN_APP} ./artisan db:seed --class=PartnerCompanyOperationUserSeeder
    ${RUN_APP} ./artisan db:seed --class=PartnerCompanyNotificationSeeder
    ${RUN_APP} ./artisan db:seed --class=UserSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseRealEstateSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseRealEstateSearchSeeder
    ${RUN_APP} ./artisan db:seed --class=VoucherContractSeeder
    ${RUN_APP} ./artisan db:seed --class=VoucherSeeder
    ${RUN_APP} ./artisan db:seed --class=SellRealEstateSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseSeeder
    ${RUN_APP} ./artisan db:seed --class=RefinancePreContractSeeder
    ${RUN_APP} ./artisan db:seed --class=RefinanceMainContractSeeder
    ${RUN_APP} ./artisan db:seed --class=DashboardContractSeeder
    ${RUN_APP} ./artisan db:seed --class=AdviserConsultSeeder
    ${RUN_APP} ./artisan db:seed --class=CustomerManagementSeeder
    ${RUN_APP} ./artisan db:seed --class=PurchaseLoanPreContractSeeder
    ${RUN_APP} ./artisan db:seed --class=RequiredDocumentSeeder
    ;;

"db:dump")
    # ディレクトリが存在するかチェック
    if [ ! -d "$MIGRATIONS_DIR" ]; then
      echo "エラー: ディレクトリが見つかりません: $MIGRATIONS_DIR"
      exit 1
    fi

    # ディレクトリが存在するかチェック
    if [ ! -d "$MIGRATIONS_BACKUP_DIR" ]; then
      echo "エラー: ディレクトリが見つかりません: $MIGRATIONS_BACKUP_DIR"
      exit 1
    fi

    # ディレクトリが存在するかチェック
    if [ ! -d "$SQL_SCHEME_DIR" ]; then
      echo "エラー: ディレクトリが見つかりません: $SQL_SCHEME_DIR"
      exit 1
    fi

    docker compose down

    docker volume rm invase-db
    docker volume rm invase-redis
    docker volume rm invase-s3
    docker volume rm invase-s3-config

    docker compose up -d

    # DBコンテナが立ち上がっていることが前提となるため、疎通確認。
    ${RUN_APP} dockerize -timeout 60s -wait tcp://"${DB}":5432

    # volumeが削除されているのでバケットを生成する。
    docker compose run --rm s3-buckets

    ${RUN_APP} ./artisan migrate

    # LaravelPassportの準備
    ${RUN_APP} ./artisan passport:client --personal --name="${COMPOSE_PROJECT_NAME}" --provider=users
    ${RUN_APP} ./artisan passport:client --password --name="${COMPOSE_PROJECT_NAME}" --provider=users

    DB_PASSWORD=$(grep ^DB_PASSWORD .env | cut -d '=' -f2)

    # SQL化したmigration dataの削除とauto incrementの値を再セット
    if ! docker exec -i -e PGPASSWORD="${DB_PASSWORD}" invase-backend-app psql -U invase -h invase-backend-db -d invase -c "DELETE FROM migrations WHERE id > 6; SELECT setval('migrations_id_seq', 7, false);"; then
      echo "エラー: migrationsテーブルの設定処理に失敗しました"
      exit 1
    fi

    # sqlファイルの更新
    if ! docker exec -i -e PGPASSWORD="${DB_PASSWORD}" invase-backend-app pg_dump -U invase -h invase-backend-db -d invase > "${SQL_SCHEME_DIR}"/pgsql-schema.sql; then
      echo "エラー: スキーマダンプに失敗しました"
      exit 1
    fi

    # テスト用sqlファイルの更新
    if ! docker exec -i -e PGPASSWORD="${DB_PASSWORD}" invase-backend-app pg_dump -U invase -h invase-backend-db -d invase > "${SQL_SCHEME_DIR}"/pgsql_test-schema.sql; then
      echo "エラー: テスト用のスキーマダンプに失敗しました"
      exit 1
    fi

    # 対象ディレクトリ内の.phpファイルをループ処理
    for file_path in "$MIGRATIONS_DIR"/*.php; do

      filename=$(basename "$file_path")
      year=${filename:0:4}

      # 年が数字であり、かつ2025年以上か判定
      if [[ "$year" =~ ^[0-9]+$ ]] && [ "$year" -ge 2025 ]; then
        mv "$file_path" "$MIGRATIONS_BACKUP_DIR/"
      fi
    done

    # --no-refreshがある場合はDBのリフレッシュをスキップ
    if [[ " $* " =~ " --no-refresh " ]]; then
      exit 0
    fi

    # DBをリフレッシュ
    $0 db:refresh
    ;;

"db:wipe")
    ${RUN_APP} ./artisan db:wipe
    ;;

"composer:refresh")
    rm -rf ${LOCAL_VENDOR_DIR}
    docker compose down
    docker volume rm invase-vendor
    docker compose up -d
    ${RUN_APP} composer install
    ${RUN_APP} composer dump-autoload
    docker cp "${APP}":"${REMOTE_VENDOR_DIR}" ${LOCAL_APP_DIR}
    ;;

"composer")
    rm -rf ${LOCAL_VENDOR_DIR}
    ${RUN_APP} composer "${@:2}"
    docker cp "${APP}":"${REMOTE_VENDOR_DIR}" ${LOCAL_APP_DIR}
    ;;

"artisan")
    ${RUN_APP} ./artisan "${@:2}"
    ;;

"yarn")
    rm -rf ${LOCAL_NODE_DIR}
    ${RUN_APP} yarn "${@:2}"
    docker cp "${APP}":"${REMOTE_NODE_DIR}" ${LOCAL_APP_DIR}
    ;;

"watch")
    ${RUN_APP} yarn run watch-poll
    ;;

"logs")
    docker compose logs -f
    ;;

"clean-volume")
    docker volume prune -f
    ;;

"larastan")
    ${RUN_APP} ./vendor/bin/phpstan analyse -c phpstan.neon
    ;;

"test")
    docker compose rm -s -f db-test
    docker compose -f docker-compose.yml up -d db-test
    docker exec -i "${APP}" dockerize -timeout 60s -wait tcp://"${DB}"-test:5432
    docker exec -i "${APP}" ./vendor/bin/phpunit "${@:2}"
    ;;

"paratest")
    docker compose rm -s -f db-test
    docker compose -f docker-compose.yml up -d db-test
    docker exec -i "${APP}" dockerize -timeout 60s -wait tcp://"${DB}"-test:5432
    docker exec -i "${APP}" php artisan test --parallel "${@:2}"
    ;;

"paratest-main")
    docker compose rm -s -f db-test
    docker compose -f docker-compose.yml up -d db-test
    docker exec -i "${APP}" dockerize -timeout 60s -wait tcp://"${DB}"-test:5432
    docker exec -i "${APP}" php artisan test --parallel "${@:2}" --testsuite=Unit,Feature-EndUser,Feature-MfsAdminUser,Feature-PartnerCompany
    ;;

"destroy")
    docker compose down --rmi all --volumes --remove-orphans
    docker network prune -f
    docker container prune -f
    docker image prune -f
    docker volume prune -f
    docker images
    rm -rf ${LOCAL_VENDOR_DIR}
    rm -rf ${LOCAL_NODE_DIR}
    ;;

"github-actions-build")
    # ネットワーク名定義
    PROJECT_NETWORK=$(grep NETWORK_NAME .env | cut -d '=' -f2)
    docker network ls | grep "${PROJECT_NETWORK}" >/dev/null || docker network create "${PROJECT_NETWORK}"
    docker compose -f docker-compose.ci.yml up -d
    ${RUN_APP_GITHUB_ACTIONS} dockerize -timeout 60s -wait tcp://"${DB}":5432
    ${RUN_APP_GITHUB_ACTIONS} composer install
    ;;

"github-actions-unit-test")
    ${RUN_APP_GITHUB_ACTIONS} ./vendor/bin/phpunit ./tests/Unit
    ;;

"github-actions-feature-end-user-test")
    ${RUN_APP_GITHUB_ACTIONS} ./vendor/bin/phpunit ./tests/Feature/EndUser
    ;;

"github-actions-feature-mfs-admin-user-test")
    ${RUN_APP_GITHUB_ACTIONS} ./vendor/bin/phpunit ./tests/Feature/MfsAdminUser
    ;;

"github-actions-feature-partner-company-test")
    ${RUN_APP_GITHUB_ACTIONS} ./vendor/bin/phpunit ./tests/Feature/PartnerCompany
    ;;
esac
